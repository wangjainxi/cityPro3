{"remainingRequest":"/Users/apple/work/study/city33/cityPro3/node_modules/babel-loader/lib/index.js!/Users/apple/work/study/city33/cityPro3/node_modules/eslint-loader/index.js??ref--13-0!/Users/apple/work/study/city33/cityPro3/src/utils/request.js","dependencies":[{"path":"/Users/apple/work/study/city33/cityPro3/src/utils/request.js","mtime":1585369060830},{"path":"/Users/apple/work/study/city33/cityPro3/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/apple/work/study/city33/cityPro3/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/apple/work/study/city33/cityPro3/node_modules/eslint-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":["\"use strict\";\n\nvar _interopRequireDefault = require(\"/Users/apple/work/study/city33/cityPro3/node_modules/@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.tryHideFullScreenLoading = tryHideFullScreenLoading;\nexports.default = exports.showFullScreenLoading = exports.startLoading = exports.endLoading = void 0;\n\nvar _axios = _interopRequireDefault(require(\"axios\"));\n\nvar _store = _interopRequireDefault(require(\"@/store\"));\n\nvar _elementUi = require(\"element-ui\");\n\nvar _tools = require(\"@/utils/tools\");\n\nvar loading; // 是否有请求在刷新token\n\nwindow.isRefreshing = false; // 结束加载\n\nvar endLoading = function endLoading() {\n  loading.close();\n}; // 被挂起的请求数组\n\n\nexports.endLoading = endLoading;\nvar subscribesArr = []; // push所有请求到数组中\n\nvar subscribeTokenRefresh = function subscribeTokenRefresh(cb) {\n  subscribesArr.push(cb);\n}; // 用新token发起请求\n\n\nvar reloadSubscribesArr = function reloadSubscribesArr(token) {\n  subscribesArr.map(function (cb) {\n    return cb(token);\n  });\n}; // 开始加载\n\n\nvar startLoading = function startLoading() {\n  loading = _elementUi.Loading.service({\n    lock: true,\n    text: '加载中...',\n    background: 'rgba(0, 0, 0, 0.2)'\n  });\n};\n\nexports.startLoading = startLoading;\nvar needLoadingRequestCount = 0;\n\nvar showFullScreenLoading = function showFullScreenLoading() {\n  if (needLoadingRequestCount === 0) {\n    startLoading();\n  }\n\n  needLoadingRequestCount++;\n};\n\nexports.showFullScreenLoading = showFullScreenLoading;\n\nfunction tryHideFullScreenLoading() {\n  if (needLoadingRequestCount <= 0) return;\n  needLoadingRequestCount--;\n\n  if (needLoadingRequestCount === 0) {\n    endLoading();\n  }\n} // create an axios instance\n\n\nvar service = _axios.default.create({\n  baseURL: '',\n  timeout: 20000 // request timeout\n\n});\n\nservice.interceptors.request.use(function (config) {\n  // 如果是不需要token的接口直接返回即可\n  if (config.url.indexOf('/login') > 0) {\n    return config;\n  }\n\n  config.headers['Content-Type'] = 'application/json;charset=UTF-8'; // 获取token\n  // const token = localStorage.getItem('token');\n  // const refreshToken = localStorage.getItem('refreshToken');\n\n  /**\n   *  如果 refreshToken 过期重新登录\n   *  如果 token 过期 更新token\n   */\n  // if (!refreshToken || !isRefreshTokenExpired(refreshToken)) {\n  //   if (!token || isTokenExpired(token)) {\n  //     if (!window.isRefreshing) {\n  //       window.isRefreshing = true;\n  //       post('/api/auth/token', { refreshToken })\n  //         .then((res) => {\n  //           window.isRefreshing = false;\n  //           if (res && JSON.stringify(res) !== '{}') {\n  //             store.commit('user/SET_TOKEN', res);\n  //             reloadSubscribesArr(res.token);\n  //           } else {\n  //             subscribesArr = [];\n  //             directLogin();\n  //           }\n  //         })\n  //         .catch((error) => {\n  //           if (error.request.status === 401) {\n  //             message('warning', '登录超时，请重新登录！');\n  //           } else {\n  //             message('error', error.message);\n  //           }\n  //           console.log('err2', error);\n  //           subscribesArr = [];\n  //           window.isRefreshing = false;\n  //           directLogin();\n  //         });\n  //     }\n  //     const retry = new Promise((resolve, reject) => {\n  //       subscribeTokenRefresh((token) => {\n  //         config.headers['x-Authorization'] = `Bearer ${token}`;\n  //         resolve(config);\n  //       });\n  //     });\n  //     return retry;\n  //   } else {\n  //     config.headers['Content-Type'] = 'application/json;charset=UTF-8';\n  //     config.headers['x-Authorization'] = `Bearer ${token}`;\n  //     return config;\n  //   }\n  // } else {\n  //   message('error', '重新登录');\n  //   directLogin();\n  // }\n\n  showFullScreenLoading();\n  config.headers['x-Authorization'] = \"Bearer \".concat(localStorage.getItem('token'));\n  config.headers['Content-Type'] = 'application/json;charset=UTF-8';\n  return config;\n}, function (error) {\n  console.log('err3', error);\n  (0, _tools.message)('error', error.message);\n  tryHideFullScreenLoading();\n  return Promise.reject(error);\n}); // response interceptor\n\nservice.interceptors.response.use(function (response) {\n  if (response.status === 401) {\n    console.log('401');\n    (0, _tools.directLogin)();\n  } else if (response.status === 500) {\n    (0, _tools.message)('error', response.error);\n  }\n\n  tryHideFullScreenLoading();\n  return response.data;\n}, function (error) {\n  tryHideFullScreenLoading();\n  console.log('err5', error.response);\n\n  if (error.response && error.response.status) {\n    var err = error.response.data;\n    return Promise.reject(err);\n  } else if (error && error.stack.indexOf('timeout') > -1) {\n    (0, _tools.message)('error', '请求超时，请稍后重试');\n  } else if (error && error.stack.indexOf('Network Error') > -1) {\n    (0, _tools.message)('error', '网络错误，请检查网络连接是否正常');\n  } else {\n    (0, _tools.message)('error', '系统错误，请联系管理员');\n  }\n});\nvar _default = service;\nexports.default = _default;",null]}