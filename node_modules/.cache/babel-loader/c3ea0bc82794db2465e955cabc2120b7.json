{"remainingRequest":"/Users/apple/work/study/city33/cityPro3/node_modules/babel-loader/lib/index.js!/Users/apple/work/study/city33/cityPro3/node_modules/eslint-loader/index.js??ref--13-0!/Users/apple/work/study/city33/cityPro3/src/store/modules/net.js","dependencies":[{"path":"/Users/apple/work/study/city33/cityPro3/src/store/modules/net.js","mtime":1585239354720},{"path":"/Users/apple/work/study/city33/cityPro3/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/apple/work/study/city33/cityPro3/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/apple/work/study/city33/cityPro3/node_modules/eslint-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":["\"use strict\";\n\nvar _interopRequireDefault = require(\"/Users/apple/work/study/city33/cityPro3/node_modules/@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nrequire(\"regenerator-runtime/runtime\");\n\nvar _asyncToGenerator2 = _interopRequireDefault(require(\"/Users/apple/work/study/city33/cityPro3/node_modules/@babel/runtime-corejs2/helpers/asyncToGenerator\"));\n\nvar _toConsumableArray2 = _interopRequireDefault(require(\"/Users/apple/work/study/city33/cityPro3/node_modules/@babel/runtime-corejs2/helpers/toConsumableArray\"));\n\nvar _lodash = require(\"lodash\");\n\nvar _tools = require(\"@/utils/tools\");\n\nvar _net = require(\"@/api/net\");\n\nvar _data = require(\"./data\");\n\n// import { getTopicData } from '@/api/net';\nvar state = {\n  keepStatus: false,\n  isGateWay: false,\n  hasModify: false,\n  netData: _data.netData,\n  netItemData: {},\n  cloneNetItemData: {},\n  bigIconData: [],\n  snIndexStore: 0,\n  defultItemStore: '1',\n  extendData: _data.defatultExtendData,\n  extendCloneData: (0, _lodash.cloneDeep)(_data.defatultExtendData),\n  basicInfo: {\n    additionalInfo: {\n      state: {\n        active: false,\n        connected: false,\n        inactivityTimeout: '',\n        lastActivityTime: '',\n        lastConnectTime: '',\n        lastDisconnectTime: '',\n        lastInactivityAlarmTime: '',\n        lastShutdownTime: '',\n        lastStartupTime: ''\n      }\n    }\n  },\n  treeData: [],\n  deviceId: {\n    entityType: 'DEVICE',\n    entityId: ''\n  },\n  attrData: [],\n  proList: [],\n  hasNext: false,\n  loadStatus: false,\n  isFirst: true,\n  fetchParams: {\n    limit: 40,\n    textOffset: '',\n    idOffset: '',\n    textSearch: '',\n    typeId: '',\n    entityType: ''\n  },\n  isShowEdit: false,\n  childDeviceInfo: {}\n};\nvar mutations = {\n  KEEP_STATUS: function KEEP_STATUS(state, bool) {\n    state.keepStatus = bool;\n  },\n  CHANGE_EDIT: function CHANGE_EDIT(state, bool) {\n    state.isShowEdit = bool;\n  },\n  // 获取大图标列表数据\n  BIG_ICON_DATA: function BIG_ICON_DATA(state, data) {\n    // state.bigIconData = [];\n    state.loadStatus = false;\n    state.fetchParams.textOffset = data.nextPageLink && data.nextPageLink.textOffset;\n    state.fetchParams.idOffset = data.nextPageLink && data.nextPageLink.idOffset;\n    state.hasNext = data.hasNext;\n    data.data.map(function (item, index) {\n      item.children = [{\n        id: 2,\n        label: '子节点',\n        children: []\n      }, {\n        id: 'channel',\n        label: '串口通道',\n        children: []\n      }];\n      return item;\n    });\n    var temp = state.bigIconData;\n    state.bigIconData = [];\n    temp.push.apply(temp, (0, _toConsumableArray2.default)(data.data));\n    state.bigIconData = temp;\n  },\n  SET_CHILD_BASIC_INFO: function SET_CHILD_BASIC_INFO(state, data) {\n    state.childDeviceInfo = data;\n  },\n  SET_CHILD_DEVICE: function SET_CHILD_DEVICE(state, _ref) {\n    var params = _ref.params,\n        res = _ref.res;\n    console.log('SET_CHILD_DEVICE  params, res', params, res);\n    console.log(' state.bigIconData', state.bigIconData);\n    var gatewayId = params.gatewayId;\n    state.bigIconData.map(function (item, index) {\n      if (item.id.id === gatewayId) {\n        item.children[0].children = res.data;\n      }\n    });\n  },\n  INIT_PARAMS: function INIT_PARAMS(state, params) {\n    state.loadStatus = false;\n    state.fetchParams.textOffset = '';\n    state.fetchParams.idOffset = '';\n    state.fetchParams.limit = '';\n    state.fetchParams.typeId = '';\n    state.hasNext = false;\n    state.bigIconData = [];\n    state.isFirst = true;\n\n    if (params) {\n      state.bigIconData = [];\n      state.fetchParams.textSearch = params.textSearch || '';\n      state.fetchParams.typeId = params.typeId || '';\n      state.fetchParams.entityType = params.entityType || '';\n      state.fetchParams.limit = params.limit || 40;\n    }\n  },\n  UPDATE_ICON_DATA: function UPDATE_ICON_DATA(state, stateData) {\n    state.bigIconData.map(function (itemIcon, index) {\n      if (itemIcon.id.id === stateData.deviceId.id) {\n        itemIcon.additionalInfo.state.active = stateData.state.active;\n        itemIcon.additionalInfo.state.connected = stateData.state.connected;\n        itemIcon.additionalInfo.state.lastConnectTime = stateData.state.lastConnectTime;\n        itemIcon.additionalInfo.state.lastDisconnectTime = stateData.state.lastDisconnectTime;\n        itemIcon.additionalInfo.state.lastStartupTime = stateData.state.lastStartupTime;\n\n        if (stateData.additionalInfo) {\n          itemIcon.additionalInfo.fwVer = stateData.additionalInfo.fwVer || '-';\n        }\n      }\n\n      return itemIcon;\n    });\n  },\n  // 获取网关属性列表\n  GET_ATTR_DATA: function GET_ATTR_DATA(state, data) {\n    state.attrData = (0, _lodash.cloneDeep)((0, _lodash.merge)([{\n      'lastUpdateTs': 1571976468073,\n      'key': 'settings',\n      'value': {\n        'deployCenter': [{\n          'ip': 'cloud.moonstart.cn',\n          'port': '1883',\n          'accessToken': ''\n        }],\n        'ntpServer': ['0.asia.pool.ntp.org', 'ntp1.aliyun.com', '1.asia.pool.ntp.org'],\n        'network': {\n          'dhcpEnable': true,\n          'staticIP': '',\n          'staticMask': '',\n          'staticGW': ''\n        },\n        'logStore': {\n          'endpoint': 'cloud.moonstart.cn',\n          'accessKeyID': '',\n          'accessKeySecret': '',\n          'projectName': '',\n          'logLevel': 'INFO',\n          'logstoreName': 'default'\n        },\n        'forwardChannels': [{\n          'name': '',\n          'protocol': 'mqtt/tcp',\n          'server': 'cloud.moonstart.cn',\n          'port': '1883',\n          'topic': '',\n          'username': '',\n          'password': ''\n        }]\n      },\n      'type': 'JSON'\n    }], data));\n  },\n  // 设置state\n  GET_EXTEND_DATA: function GET_EXTEND_DATA(state, data) {\n    var res = data.res,\n        params = data.params;\n\n    if (params) {\n      state.bigIconData.map(function (item, index) {\n        if (item.id.id === params.entityId) {\n          var resData = (0, _toConsumableArray2.default)(res[0].value);\n          resData.map(function (extend, deviceIndex) {\n            var children = [];\n\n            if (extend.configuration && extend.configuration.servers) {\n              extend.configuration.servers.map(function (server, serverIndex) {\n                server.devices.map(function (device, deviceIndex) {\n                  children.push({\n                    deviceName: device.deviceName\n                  });\n                });\n              });\n              extend.children = children;\n            }\n\n            return extend;\n          });\n          item.children[0].children = resData;\n          var extendItem = [{\n            value: state.bigIconData[index].children[0].children\n          }];\n          state.extendData = (0, _lodash.cloneDeep)(extendItem);\n          state.extendCloneData = extendItem;\n          return item;\n        }\n      });\n    }\n  },\n  // 设置clone state\n  SET_CLONE_EXTEND_DATA: function SET_CLONE_EXTEND_DATA(state) {\n    state.extendCloneData = (0, _lodash.cloneDeep)(state.extendDatata);\n  },\n  // 设置clone state\n  DELETE_EXTEND_DATA: function DELETE_EXTEND_DATA(state, snIndex) {\n    state.extendCloneData[0].value.splice(snIndex, 1);\n  },\n  // 设置默认index\n  SET_INDEX: function SET_INDEX(state, _ref2) {\n    var snIndex = _ref2.snIndex,\n        defaultIem = _ref2.defaultIem;\n    state.snIndexStore = snIndex;\n    state.defultItemStore = defaultIem;\n  },\n  // netServer\n  CHANGE_NET_SERVER: function CHANGE_NET_SERVER(state, data) {\n    state.attrData;\n  },\n  PUSH_CHILDREN_DATA: function PUSH_CHILDREN_DATA(state, data) {\n    var newBigIconData = state.bigIconData.concat();\n    state.bigIconData = null;\n    newBigIconData.map(function (item, index) {\n      return data.map(function (ele, j) {\n        item.children = [];\n\n        if (item.id === ele.gatewayId) {\n          item.children = data;\n        }\n\n        return state.bigIconData;\n      });\n    });\n    state.bigIconData = newBigIconData;\n  },\n  // 改变大小图标列表状态\n  CHANGE_VIEW: function CHANGE_VIEW(state, bool) {\n    state.isGateWay = bool;\n  },\n  // 设置device id\n  SET_DEVICEID: function SET_DEVICEID(state, params) {\n    state.deviceId.entityId = params.id;\n    state.deviceId.entityType = params.entityType;\n  },\n  // 是否保存更改\n  CHANGE_MODIFY: function CHANGE_MODIFY(state, bool, isLeave) {\n    if (bool) {\n      state.hasModify = true;\n    } else {\n      state.hasModify = false;\n    }\n  },\n  // 确认离开\n  CONFIRM_LEAVE: function CONFIRM_LEAVE(state) {\n    console.log('state.extendData', state.extendData);\n    state.extendCloneData = (0, _lodash.cloneDeep)(state.extendData);\n    state.bigIconData.map(function (item, index) {\n      if (item.id.id === state.deviceId.entityId) {\n        item.children[0].children = (0, _toConsumableArray2.default)(state.extendData[0].value);\n        return item;\n      }\n    });\n    state.hasModify = false;\n  },\n  // 获取tree列表数据\n  TREE_DATA: function TREE_DATA(state, data) {\n    state.treeData = data;\n  },\n  // // 获取topic列表\n  // TOPIC_LIST: (state, data) => {\n  //   state.topicList = data;\n  // },\n  // 新建扩展\n  NEW_EQUIP: function NEW_EQUIP(state, data) {\n    // state.extendData[0].value.push(cloneDeep(data));\n    // state.extendCloneData[0].value.push(cloneDeep(data));\n    if (data) {\n      state.bigIconData.map(function (item, index) {\n        if (item.id.id === state.deviceId.entityId) {\n          state.bigIconData[index].children[0].children = [data];\n          var extend = [{\n            value: state.bigIconData[index].children[0].children\n          }];\n          state.extendData = (0, _lodash.cloneDeep)(extend);\n          state.extendCloneData = extend;\n          return item;\n        }\n      });\n    }\n  },\n  // 新建扩展批量\n  newEquipMany: function newEquipMany(state, dataArr) {\n    var _state$extendData$0$v, _state$extendCloneDat;\n\n    (_state$extendData$0$v = state.extendData[0].value).push.apply(_state$extendData$0$v, (0, _toConsumableArray2.default)(dataArr));\n\n    (_state$extendCloneDat = state.extendCloneData[0].value).push.apply(_state$extendCloneDat, (0, _toConsumableArray2.default)(dataArr));\n  },\n  // 对比两个对象是否相等\n  COMPARE_EQUIL: function COMPARE_EQUIL(state, data) {\n    var isE = (0, _tools.compare)(state.netItemData, state.cloneNetItemData);\n    console.log(isE);\n  },\n  // 保存更新\n  SAVE_UPDATE: function SAVE_UPDATE(state, data) {\n    state.netItemData = state.cloneNetItemData;\n  },\n  // 获取单个设备数据\n  GET_ITEM_DATA: function GET_ITEM_DATA(state, data) {\n    state.netItemData = data;\n    state.cloneNetItemData = (0, _lodash.cloneDeep)(data);\n  },\n  // 删除点位\n  DELETE_POINT: function DELETE_POINT(state, rowData) {\n    for (var i = state.cloneNetItemData.ioConfig.mbCfg.chan.length - 1; i >= 0; i--) {\n      if (state.cloneNetItemData.ioConfig.mbCfg.chan[i].checked) {\n        state.cloneNetItemData.ioConfig.mbCfg.chan.splice(i, 1);\n      }\n    }\n  },\n  SET_BASICINFO: function SET_BASICINFO(state, data) {\n    state.basicInfo = data;\n  },\n  SET_ISFIRST: function SET_ISFIRST(state, bool) {\n    state.isFirst = bool;\n  },\n  LOAD_STATUS: function LOAD_STATUS(state, bool) {\n    state.loadStatus = bool;\n  },\n  // 产品列表\n  GET_PRO_LIST: function GET_PRO_LIST(state, data) {\n    state.proList = data;\n  },\n  // 添加点位\n  ADD_POINT: function ADD_POINT(state, rowData) {\n    state.cloneNetItemData.ioConfig.mbCfg.chan.push({\n      // 采集通道列表\n      checked: false,\n      tag: \"IA\".concat(Date.now()),\n      // 点位名称\n      desc: '',\n      // 点位描述\n      slaveAddr: 1,\n      // 从站salve\n      regAddr: 0,\n      // 寄存器地址\n      funcCode: '3',\n      // 功能码\n      regCnt: 2,\n      // 寄存器数量\n      compute: 'hex2int($x)' // 计算\n\n    });\n  }\n};\nvar actions = {\n  // 纯获取大图标列表数据\n  actionGetNetList: function actionGetNetList(_ref3) {\n    var dispatch = _ref3.dispatch,\n        commit = _ref3.commit;\n    (0, _net.getIconGateWayList)(state.fetchParams).then(function (res) {\n      if (res) {\n        commit('BIG_ICON_DATA', res);\n        dispatch('stateMonitor', res.data.map(function (el) {\n          return el.id.id;\n        }));\n      }\n    }).catch(function (err) {\n      console.log('err', err);\n    });\n  },\n  // 获取大图标列表数据,包含操作\n  getBigIconData: function getBigIconData(_ref4) {\n    var dispatch = _ref4.dispatch,\n        commit = _ref4.commit;\n    commit('LOAD_STATUS', true);\n    (0, _net.getIconGateWayList)(state.fetchParams).then(function (res) {\n      if (res) {\n        commit('BIG_ICON_DATA', res);\n\n        if (res.data.length > 0 && state.isFirst) {\n          window.localStorage.setItem('basicInfo', JSON.stringify(res.data[0]));\n          commit('SET_BASICINFO', res.data[0]);\n          commit('SET_ISFIRST', false);\n          commit('SET_DEVICEID', res.data[0].id);\n          dispatch('stateMonitor', res.data.map(function (el) {\n            return el.id.id;\n          }));\n        }\n      }\n    }).catch(function (err) {\n      console.log('err', err);\n    });\n  },\n  getChildDevice: function getChildDevice(_ref5, params) {\n    var commit = _ref5.commit;\n    (0, _net.getIconGateWayList)(params).then(function (res) {\n      commit('SET_CHILD_DEVICE', {\n        params: params,\n        res: res\n      });\n      console.log('getChildDevice', res);\n    });\n  },\n  // 获取tree列表数据\n  getTreeData: function getTreeData(_ref6, netId) {\n    var commit = _ref6.commit;\n\n    if (netId) {\n      (0, _net.getTreeList)(netId).then(function (res) {\n        commit('PUSH_CHILDREN_DATA', res);\n      }).catch(function (err) {\n        console.log('err', err);\n      });\n    }\n  },\n  // 获取网关属性设置\n  getAttrData: function getAttrData(_ref7, params) {\n    var commit = _ref7.commit;\n    params.key = 'settings';\n    (0, _net.getAttr)(params).then(function (res) {\n      if (res.length) {\n        var temp = res[0].value.network;\n\n        if (Array.isArray(temp)) {\n          return;\n        }\n      }\n\n      commit('GET_ATTR_DATA', res);\n    }).catch(function (err) {\n      console.log('err', err);\n    });\n  },\n  // 获取网关扩展管理\n  getExtendData: function getExtendData(_ref8, params) {\n    var commit = _ref8.commit;\n    params.key = 'extensions';\n    (0, _net.getAttr)(params).then(function (res) {\n      if (res.length > 0) {// commit('GET_EXTEND_DATA', { res, params });\n      } else {\n        res = [{\n          'lastUpdateTs': 1575091670330,\n          'key': 'extensions',\n          'value': [],\n          'type': 'JSON'\n        }]; // commit('GET_EXTEND_DATA', { res, params });\n      }\n    }).catch(function (err) {\n      console.log('err', err);\n    });\n  },\n  // 监控设备运行状态\n  stateMonitor: function () {\n    var _stateMonitor = (0, _asyncToGenerator2.default)(\n    /*#__PURE__*/\n    regeneratorRuntime.mark(function _callee(_ref9, deviceIds) {\n      var commit, query;\n      return regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              commit = _ref9.commit;\n              query = deviceIds.join('&deviceIds=');\n\n              if (state.devStateMonotor != null) {\n                state.devStateMonotor.abort();\n              }\n\n              _context.next = 5;\n              return (0, _net.stateEventTrace)(query, function (updateData) {\n                console.log('状态更新 stateEventTrace, state', updateData);\n                commit('product/UPDATE_DEVICE_STATUS', updateData, {\n                  root: true\n                });\n                commit('UPDATE_ICON_DATA', updateData);\n              });\n\n            case 5:\n              state.devStateMonotor = _context.sent;\n\n            case 6:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    function stateMonitor(_x, _x2) {\n      return _stateMonitor.apply(this, arguments);\n    }\n\n    return stateMonitor;\n  }(),\n  //\n  // // 获取topic列表\n  // getTopicList({ commit }, gateWayId) {\n  //   // let topicData = getTopicData(gateWayId)\n  //   commit('TOPIC_LIST', topicData);\n  // },\n  // 新建设备\n  newEquip: function newEquip(_ref10, data) {\n    var commit = _ref10.commit;\n    commit('NEW_EQUIP', data);\n  },\n  // 获取单个设备数据\n  getNetItemData: function getNetItemData(_ref11, id) {\n    var commit = _ref11.commit;\n    commit('GET_ITEM_DATA', _data.accessData);\n  }\n};\nvar _default = {\n  namespaced: true,\n  state: state,\n  mutations: mutations,\n  actions: actions\n};\nexports.default = _default;",null]}